@model YarnsAndMobileRCOnlineBookStore.Controllers.PaginatedList<YarnsAndMobileRCOnlineBookStore.Models.Sale>
@using Microsoft.AspNetCore.Identity
@using YarnsAndMobileRCOnlineBookStore.Models.Data
@inject SignInManager<Member> SignInManager
@inject UserManager<Member> UserManager

@{
    ViewData["Title"] = "Sale Index";
}
@{
    var adminOnly = !SignInManager.IsSignedIn(User) || !User.IsInRole("Admin") ? "invisible" : "";
}
<p></p>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            <em>Find by Date or Email: </em>
            <input type="text" class="w-50" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" />
            <a class="@adminOnly" asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th scope="col">
                @Html.ActionLink("Order Number", "Index", new { sortOrder = ViewBag.TitleSort, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th scope="col">
                @Html.ActionLink("Purchase Date", "Index", new { sortOrder = ViewBag.TitleSort, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th scope="col">
                @Html.ActionLink("Book Title", "Index", new { sortOrder = ViewBag.BookSort, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th scope="col">
                @Html.ActionLink("Price", "Index", new { sortOrder = ViewBag.PriceSort, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th scope="col">
                @Html.ActionLink("Member Email", "Index", new { sortOrder = ViewBag.MemberSort, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.OrderId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PurchaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Books.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Members.Email)
            </td>
            <td>
                <a class="@adminOnly" asp-action="Edit" asp-route-id="@item.OrderId">Edit |</a>
                <a asp-action="Details" asp-route-id="@item.OrderId">Details</a>
                <a class="@adminOnly" asp-action="Delete" asp-route-id="@item.OrderId"> | Delete</a>
            </td>
        </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<div>
    <ul class="pagination">
        <li class="page-item @prevDisabled">
            <a asp-action="Index"
               asp-route-sortOrder="@ViewData["CurrentSort"]"
               asp-route-pageNumber="1"
               asp-route-currentFilter="@ViewData["CurrentFilter"]"
               class="page-link ">
                First
            </a>
        </li>
        <li class="page-item @prevDisabled">
            <a asp-action="Index"
               asp-route-sortOrder="@ViewData["CurrentSort"]"
               asp-route-pageNumber="@(Model.PageIndex - 1)"
               asp-route-currentFilter="@ViewData["CurrentFilter"]"
               class="page-link ">
                Previous
            </a>
        </li>
        @if (Model.TotalPages > 0)
        {
            int pageNum;
            int pageLimit = 10;
            if (Model.TotalPages > pageLimit)
                pageLimit = 10;
            else
                pageLimit = Model.TotalPages;

            @for (int i = 0; i < pageLimit; i++)
            {
                pageNum = Model.PageIndex + i;
                var currentIndex = Model.PageIndex == pageNum ? "active" : "";
                if (pageNum <= Model.TotalPages)
                {
                    <li class="page-item @(currentIndex)">
                        <a asp-action="Index"
                           asp-route-sortOrder="@ViewData["CurrentSort"]"
                           asp-route-pageNumber="@(pageNum)"
                           asp-route-currentFilter="@ViewData["CurrentFilter"]"
                           class="page-link">@(pageNum)</a>
                    </li>
                }
            }
        }
        <li class="page-item @nextDisabled">
            <a asp-action="Index"
               asp-route-sortOrder="@ViewData["CurrentSort"]"
               asp-route-pageNumber="@(Model.PageIndex + 1)"
               asp-route-currentFilter="@ViewData["CurrentFilter"]"
               class="page-link ">
                Next
            </a>
        </li>
        <li class="page-item @nextDisabled">
            <a asp-action="Index"
               asp-route-sortOrder="@ViewData["CurrentSort"]"
               asp-route-pageNumber="@(Model.TotalPages)"
               asp-route-currentFilter="@ViewData["CurrentFilter"]"
               class="page-link ">
                Last
            </a>
        </li>
    </ul>
</div>

<div id="container" style="margin-left: 20px">
    <p></p>
    <p></p>
    <div class="pagination" style="margin-left: 400px">
        Page @(Model.PageIndex < Model.TotalPages ? Model.PageIndex : 1) of @Model.TotalPages

    </div>
</div>

<br />
<p></p>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}